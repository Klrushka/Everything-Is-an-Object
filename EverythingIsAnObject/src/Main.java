
public class Main {
    public static void main(String[] args) {

        // Task 1

       /*Создайте класс с полями int и char, которые не инициализируются в программе.
       Выведите их значения, чтобы убедиться в том, 4ToJava выполняет инициализацию
       по умолчанию.*/

        Task1 task1 = new Task1();

        System.out.println("Int value: " + task1.value1);
        System.out.println("Char value: " + task1.value2 + '\n');

        // Task 2
        /*На основании примера HelloDate.java в этой главе напишите программу «Привет,
        мир», которая просто выводит это сообщение. Программа будет содержать только
        один метод (тот, который исполняется при запуске программы — main()). Не забудьте
        объявить его статическим (static) и включите список аргументов, даже если вы не
        будете его использовать. Скомпилируйте программу с помощью javac и запустите
        на исполнение из java. Если вы используете не JDK, а другую среду разработки
        программ, выясните, как в ней компилируются и запускаются программы.*/


        HelloDate.HelloDate();
        System.out.println('\n');

        // Task 8
         /* Напишите программу, которая демонстрирует, что независимо от количества
        созданных объектов класс содержит только один экземпляр поля static.*/
        TestObject t1 = new TestObject();
        TestObject t2 = new TestObject();
        System.out.println("Static field t1: " + t1.STATIC_FIELD + '\n' +
                "Static field t2: " + t2.STATIC_FIELD + '\n');

        // Task 9
        /*Напишите программу, демонстрирующую автоматическую упаковку прими-
        тивных типов.*/
        Character ch = 'x';
        Integer i = 9;
        Double d = 3d;

        /*
        Task 16 in class Tree16
        Найдите в главе 5 пример Overloading.java и добавьте в него комментарии javadoc.
        Преобразуйте их в страницу HTML и просмотрите ее в браузере.
         */



    }
}
